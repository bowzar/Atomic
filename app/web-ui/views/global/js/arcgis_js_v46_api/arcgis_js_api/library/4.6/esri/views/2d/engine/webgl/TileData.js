// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.6/esri/copyright.txt for details.
//>>built
define("require exports ../../../../core/ObjectPool ./TileDisplayData ./TileBufferData ./WGLDisplayRecord ./enums".split(" "),function(u,v,t,m,q,n,e){return function(){function f(){this.tileBufferData=this.tileDisplayData=null}f.prototype.release=function(){m.pool.release(this.tileDisplayData);this.tileDisplayData=null;q.pool.release(this.tileBufferData);this.tileBufferData=null};f.prototype.serialize=function(){var b=this.tileBufferData.serialize(),c=this.tileBufferData.getBuffers(),a=m.serialize(this.tileDisplayData,
null,0),a=new Uint8Array(a);m.serialize(this.tileDisplayData,a,0);c.push(a.buffer);return{data:{displayData:a.buffer,bufferData:b},buffers:c}};f.deserialize=function(b){var c=m.pool.acquire();m.deserialize(c,new Uint8Array(b.displayData),0);b=q.deserialize(b.bufferData);var a=new f;a.tileDisplayData=c;a.tileBufferData=b;return a};f.prototype.deserializeMeshData=function(){var b=this;this.tileDisplayData.displayObjectRegistry.forEach(function(c,a){c=0;for(a=b.tileDisplayData.displayObjectRegistry.get(a).displayRecords;c<
a.length;c++){var d=a[c],e=d.geometryType;d.readMeshDataFromBuffers(b.tileBufferData.geometries[e].vertexBuffer,b.tileBufferData.geometries[e].indexBuffer)}})};f.bind=function(b,c){var a=new f;a.tileDisplayData=b;a.tileBufferData=c;return a};f.create=function(b,c){var a=new f;a.tileDisplayData=new m;for(var d=[0,0,0,0],r=[0,0,0,0],g=0;g<b.length;g++){var k=b[g];a.tileDisplayData.displayObjects.push(k);a.tileDisplayData.displayObjectRegistry.set(k.id,k);for(var l=0,k=k.displayRecords;l<k.length;l++){var h=
k[l];a.tileDisplayData.displayRecords[h.geometryType].push(h);d[h.geometryType]+=h.meshData.vertexCount;r[h.geometryType]+=h.meshData.indexData.length}}g=function(a,b){return a.sortKey-b.sortKey};for(b=0;b<a.tileDisplayData.displayRecords.length;b++)a.tileDisplayData.displayRecords[b].sort(g);c=[c.fill||{},c.line||{},c.icon||{},c.text||{}];g=new q;for(b=0;4>b;b++){g.geometries[b].indexBuffer=new Uint32Array(r[b]);g.geometries[b].vertexBuffer={};var l=c[b],p;for(p in l)g.geometries[b].vertexBuffer[p]=
{data:new Uint32Array(d[b]*l[p]/4),stride:l[p]}}a.tileBufferData=g;(d=a.tileBufferData.geometries[e.WGLGeometryType.FILL])&&n.writeAllMeshDataToBuffers(a.tileDisplayData.displayRecords[e.WGLGeometryType.FILL],d.vertexBuffer,d.indexBuffer);(d=a.tileBufferData.geometries[e.WGLGeometryType.LINE])&&n.writeAllMeshDataToBuffers(a.tileDisplayData.displayRecords[e.WGLGeometryType.LINE],d.vertexBuffer,d.indexBuffer);(d=a.tileBufferData.geometries[e.WGLGeometryType.MARKER])&&n.writeAllMeshDataToBuffers(a.tileDisplayData.displayRecords[e.WGLGeometryType.MARKER],
d.vertexBuffer,d.indexBuffer);(d=a.tileBufferData.geometries[e.WGLGeometryType.TEXT])&&n.writeAllMeshDataToBuffers(a.tileDisplayData.displayRecords[e.WGLGeometryType.TEXT],d.vertexBuffer,d.indexBuffer);a.tileDisplayData.displayList.addToList(a.tileDisplayData.displayRecords[e.WGLGeometryType.FILL]);a.tileDisplayData.displayList.addToList(a.tileDisplayData.displayRecords[e.WGLGeometryType.LINE]);a.tileDisplayData.displayList.addToList(a.tileDisplayData.displayRecords[e.WGLGeometryType.MARKER]);a.tileDisplayData.displayList.addToList(a.tileDisplayData.displayRecords[e.WGLGeometryType.TEXT]);
return a};f.pool=new t(f);return f}()});